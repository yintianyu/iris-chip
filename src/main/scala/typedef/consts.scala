
package typedef


import chisel3._
import chisel3.util._


trait IrisProcConstants
{

    //************************************
    // Machine Parameters
    val USE_FULL_BYPASSING = true  // turn on full bypassing (only stalls
    // on load-use). Otherwise rely
    // entirely on interlocking to handle
    // pipeline hazards.
}

trait ScalarOpConstants
{

    //************************************
    // Control Signals
    val Y        = true.B
    val N        = false.B

    // PC Select Signal
    val PC_4     = 0.asUInt(2.W)  // PC + 4
    val PC_BRJMP = 1.asUInt(2.W)  // brjmp_target
    val PC_JALR  = 2.asUInt(2.W)  // jump_reg_target
    val PC_EXC   = 3.asUInt(2.W)  // exception

    // Branch Type
    val BR_N     = 0.asUInt(4.W)  // Next
    val BR_NE    = 1.asUInt(4.W)  // Branch on NotEqual
    val BR_EQ    = 2.asUInt(4.W)  // Branch on Equal
    val BR_GE    = 3.asUInt(4.W)  // Branch on Greater/Equal
    val BR_GEU   = 4.asUInt(4.W)  // Branch on Greater/Equal Unsigned
    val BR_LT    = 5.asUInt(4.W)  // Branch on Less Than
    val BR_LTU   = 6.asUInt(4.W)  // Branch on Less Than Unsigned
    val BR_J     = 7.asUInt(4.W)  // Jump
    val BR_JR    = 8.asUInt(4.W)  // Jump Register

    // RS1 Operand Select Signal
    val OP1_RS1   = 0.asUInt(2.W) // Register Source #1
    val OP1_PC    = 1.asUInt(2.W) // PC
    val OP1_IMZ   = 2.asUInt(2.W) // Zero-extended Immediate from RS1 field, for use by CSRI instructions
    val OP1_X     = 3.asUInt(2.W)

    // RS2 Operand Select Signal
    val OP2_RS2    = 0.asUInt(3.W) // Register Source #2
    val OP2_ITYPE  = 1.asUInt(3.W) // immediate, I-type
    val OP2_STYPE  = 2.asUInt(3.W) // immediate, S-type
    val OP2_SBTYPE = 3.asUInt(3.W) // immediate, B
    val OP2_UTYPE  = 4.asUInt(3.W) // immediate, U-type
    val OP2_UJTYPE = 5.asUInt(3.W) // immediate, J-type
    val OP2_X      = 6.asUInt(3.W)

    // Register Operand Output Enable Signal
    val OEN_0   = false.B
    val OEN_1   = true.B

    // Register File Write Enable Signal
    val REN_0   = false.B
    val REN_1   = true.B

    // ALU Operation Signal
    val ALU_ADD    = 0.asUInt(4.W)
    val ALU_SUB    = 1.asUInt(4.W)
    val ALU_SLL    = 2.asUInt(4.W)
    val ALU_SRL    = 3.asUInt(4.W)
    val ALU_SRA    = 4.asUInt(4.W)
    val ALU_AND    = 5.asUInt(4.W)
    val ALU_OR     = 6.asUInt(4.W)
    val ALU_XOR    = 7.asUInt(4.W)
    val ALU_SLT    = 8.asUInt(4.W)
    val ALU_SLTU   = 9.asUInt(4.W)
    val ALU_COPY_1 = 10.asUInt(4.W)
    val ALU_COPY_2 = 11.asUInt(4.W)
    val ALU_X      = 12.asUInt(4.W)

    // Writeback Select Signal
    val WB_ALU  = 0.asUInt(3.W)
    val WB_MEM  = 1.asUInt(3.W)
    val WB_PC4  = 2.asUInt(3.W)
    val WB_CSR  = 3.asUInt(3.W)
    val WB_X    = 4.asUInt(3.W)

    // Memory Write Signal
    val MWR_0   = false.B
    val MWR_1   = true.B
    val MWR_X   = false.B

    // Memory Enable Signal
    val MEN_0   = false.B
    val MEN_1   = true.B
    val MEN_X   = false.B

    // Memory Mask Type Signal
    val MSK_B   = 0.asUInt(3.W)
    val MSK_BU  = 1.asUInt(3.W)
    val MSK_H   = 2.asUInt(3.W)
    val MSK_HU  = 3.asUInt(3.W)
    val MSK_W   = 4.asUInt(3.W)
    val MSK_X   = 4.asUInt(3.W)

}

trait MemoryOpConstants
{
    val MT_X  = 0.asUInt(3.W)
    val MT_B  = 1.asUInt(3.W)
    val MT_H  = 2.asUInt(3.W)
    val MT_W  = 3.asUInt(3.W)
    val MT_D  = 4.asUInt(3.W)
    val MT_BU = 5.asUInt(3.W)
    val MT_HU = 6.asUInt(3.W)
    val MT_WU = 7.asUInt(3.W)

    val M_X   = "b0".asUInt(1.W)
    val M_XRD = "b0".asUInt(1.W) // int load
    val M_XWR = "b1".asUInt(1.W) // int store

    val DPORT = 0
    val IPORT = 1
}

trait Rv32iInstrConstants
{

    val RV32I_LW      = 0.asUInt(6.W)
    val RV32I_LB      = 1.asUInt(6.W)
    val RV32I_LBU     = 2.asUInt(6.W)
    val RV32I_LH      = 3.asUInt(6.W)
    val RV32I_LHU     = 4.asUInt(6.W)
    val RV32I_SW      = 5.asUInt(6.W)
    val RV32I_SB      = 6.asUInt(6.W)
    val RV32I_SH      = 7.asUInt(6.W)
    val RV32I_AUIPC   = 9.asUInt(6.W)
    val RV32I_LUI     = 10.asUInt(6.W)
    val RV32I_ADDI    = 12.asUInt(6.W)
    val RV32I_ANDI    = 13.asUInt(6.W)
    val RV32I_ORI     = 14.asUInt(6.W)
    val RV32I_XORI    = 15.asUInt(6.W)
    val RV32I_SLTI    = 16.asUInt(6.W)
    val RV32I_SLTIU   = 17.asUInt(6.W)
    val RV32I_SLLI    = 18.asUInt(6.W)
    val RV32I_SRAI    = 19.asUInt(6.W)
    val RV32I_SRLI    = 20.asUInt(6.W)
    val RV32I_SLL     = 22.asUInt(6.W)
    val RV32I_ADD     = 23.asUInt(6.W)
    val RV32I_SUB     = 24.asUInt(6.W)
    val RV32I_SLT     = 25.asUInt(6.W)
    val RV32I_SLTU    = 26.asUInt(6.W)
    val RV32I_AND     = 27.asUInt(6.W)
    val RV32I_OR      = 28.asUInt(6.W)
    val RV32I_XOR     = 29.asUInt(6.W)
    val RV32I_SRA     = 30.asUInt(6.W)
    val RV32I_SRL     = 31.asUInt(6.W)
    val RV32I_JAL     = 33.asUInt(6.W)
    val RV32I_JALR    = 34.asUInt(6.W)
    val RV32I_BEQ     = 35.asUInt(6.W)
    val RV32I_BNE     = 36.asUInt(6.W)
    val RV32I_BGE     = 37.asUInt(6.W)
    val RV32I_BGEU    = 38.asUInt(6.W)
    val RV32I_BLT     = 39.asUInt(6.W)
    val RV32I_BLTU    = 40.asUInt(6.W)
    val RV32I_CSRRWI  = 42.asUInt(6.W)
    val RV32I_CSRRSI  = 43.asUInt(6.W)
    val RV32I_CSRRW   = 44.asUInt(6.W)
    val RV32I_CSRRS   = 45.asUInt(6.W)
    val RV32I_CSRRC   = 46.asUInt(6.W)
    val RV32I_CSRRCI  = 47.asUInt(6.W)
    val RV32I_ECALL   = 49.asUInt(6.W)
    val RV32I_MRET    = 50.asUInt(6.W)
    val RV32I_DRET    = 51.asUInt(6.W)
    val RV32I_EBREAK  = 52.asUInt(6.W)
    val RV32I_WFI     = 53.asUInt(6.W)
    val RV32I_FENCE_I = 55.asUInt(6.W)
    val RV32I_FENCE   = 57.asUInt(6.W)

}

trait Decode_Revelent_Macro
{
    val IRIS_DECINFO_GRP_WIDTH = 3
    val IRIS_DECINFO_GRP_ALU = 0.U(IRIS_DECINFO_GRP_WIDTH.W)
    val IRIS_DECINFO_GRP_AGU = 1.U(IRIS_DECINFO_GRP_WIDTH.W)
    val IRIS_DECINFO_GRP_BJP = 2.U(IRIS_DECINFO_GRP_WIDTH.W)
    val IRIS_DECINFO_GRP_CSR = 3.U(IRIS_DECINFO_GRP_WIDTH.W)
    val IRIS_DECINFO_GRP_MULDIV = 4.U(IRIS_DECINFO_GRP_WIDTH.W)
    val IRIS_DECINFO_GRP_EAI = 5.U(IRIS_DECINFO_GRP_WIDTH.W)
    val IRIS_DECINFO_GRP_FPU = 6.U(IRIS_DECINFO_GRP_WIDTH.W)

    val IRIS_DECINFO_GRP_FPU_WIDTH = 2
    val IRIS_DECINFO_GRP_FPU_FLSU = 0.U(IRIS_DECINFO_GRP_FPU_WIDTH.W)
    val IRIS_DECINFO_GRP_FPU_FMAC = 1.U(IRIS_DECINFO_GRP_FPU_WIDTH.W)
    val IRIS_DECINFO_GRP_FPU_FDIV = 2.U(IRIS_DECINFO_GRP_FPU_WIDTH.W)
    val IRIS_DECINFO_GRP_FPU_FMIS = 3.U(IRIS_DECINFO_GRP_FPU_WIDTH.W)

    val IRIS_DECINFO_GRP_LSB = 0
    val IRIS_DECINFO_GRP_MSB = (IRIS_DECINFO_GRP_LSB+IRIS_DECINFO_GRP_WIDTH-1) // 2
    val IRIS_DECINFO_RV32_LSB = (IRIS_DECINFO_GRP_MSB+1) // 3
    val IRIS_DECINFO_RV32_MSB = (IRIS_DECINFO_RV32_LSB+1-1) // 3

    val IRIS_DECINFO_SUBDECINFO_LSB = (IRIS_DECINFO_RV32_MSB+1) // 4

    // ALU group
    val IRIS_DECINFO_ALU_ADD_LSB = IRIS_DECINFO_SUBDECINFO_LSB
    val IRIS_DECINFO_ALU_ADD_MSB = (IRIS_DECINFO_ALU_ADD_LSB+1-1)
    val IRIS_DECINFO_ALU_SUB_LSB = (IRIS_DECINFO_ALU_ADD_MSB+1)
    val IRIS_DECINFO_ALU_SUB_MSB = (IRIS_DECINFO_ALU_SUB_LSB+1-1)
    val IRIS_DECINFO_ALU_XOR_LSB = (IRIS_DECINFO_ALU_SUB_MSB+1)
    val IRIS_DECINFO_ALU_XOR_MSB = (IRIS_DECINFO_ALU_XOR_LSB+1-1)
    val IRIS_DECINFO_ALU_SLL_LSB = (IRIS_DECINFO_ALU_XOR_MSB+1)
    val IRIS_DECINFO_ALU_SLL_MSB = (IRIS_DECINFO_ALU_SLL_LSB+1-1)
    val IRIS_DECINFO_ALU_SRL_LSB = (IRIS_DECINFO_ALU_SLL_MSB+1)
    val IRIS_DECINFO_ALU_SRL_MSB = (IRIS_DECINFO_ALU_SRL_LSB+1-1)
    val IRIS_DECINFO_ALU_SRA_LSB = (IRIS_DECINFO_ALU_SRL_MSB+1)
    val IRIS_DECINFO_ALU_SRA_MSB = (IRIS_DECINFO_ALU_SRA_LSB+1-1)
    val IRIS_DECINFO_ALU_OR_LSB = (IRIS_DECINFO_ALU_SRA_MSB+1)
    val IRIS_DECINFO_ALU_OR_MSB = (IRIS_DECINFO_ALU_OR_LSB+1-1)
    val IRIS_DECINFO_ALU_AND_LSB = (IRIS_DECINFO_ALU_OR_MSB+1)
    val IRIS_DECINFO_ALU_AND_MSB = (IRIS_DECINFO_ALU_AND_LSB+1-1)
    val IRIS_DECINFO_ALU_SLT_LSB = (IRIS_DECINFO_ALU_AND_MSB+1)
    val IRIS_DECINFO_ALU_SLT_MSB = (IRIS_DECINFO_ALU_SLT_LSB+1-1)
    val IRIS_DECINFO_ALU_SLTU_LSB = (IRIS_DECINFO_ALU_SLT_MSB+1)
    val IRIS_DECINFO_ALU_SLTU_MSB = (IRIS_DECINFO_ALU_SLTU_LSB+1-1)
    val IRIS_DECINFO_ALU_LUI_LSB = (IRIS_DECINFO_ALU_SLTU_MSB+1)
    val IRIS_DECINFO_ALU_LUI_MSB = (IRIS_DECINFO_ALU_LUI_LSB+1-1)
    val IRIS_DECINFO_ALU_OP2IMM_LSB = (IRIS_DECINFO_ALU_LUI_MSB+1)
    val IRIS_DECINFO_ALU_OP2IMM_MSB = (IRIS_DECINFO_ALU_OP2IMM_LSB+1-1)
    val IRIS_DECINFO_ALU_OP1PC_LSB = (IRIS_DECINFO_ALU_OP2IMM_MSB+1)
    val IRIS_DECINFO_ALU_OP1PC_MSB = (IRIS_DECINFO_ALU_OP1PC_LSB+1-1)
    val IRIS_DECINFO_ALU_NOP_LSB = (IRIS_DECINFO_ALU_OP1PC_MSB+1)
    val IRIS_DECINFO_ALU_NOP_MSB = (IRIS_DECINFO_ALU_NOP_LSB+1-1)
    val IRIS_DECINFO_ALU_ECAL_LSB = (IRIS_DECINFO_ALU_NOP_MSB+1)
    val IRIS_DECINFO_ALU_ECAL_MSB = (IRIS_DECINFO_ALU_ECAL_LSB+1-1)
    val IRIS_DECINFO_ALU_EBRK_LSB = (IRIS_DECINFO_ALU_ECAL_MSB+1)
    val IRIS_DECINFO_ALU_EBRK_MSB = (IRIS_DECINFO_ALU_EBRK_LSB+1-1)
    val IRIS_DECINFO_ALU_WFI_LSB = (IRIS_DECINFO_ALU_EBRK_MSB+1)
    val IRIS_DECINFO_ALU_WFI_MSB = (IRIS_DECINFO_ALU_WFI_LSB+1-1)

    val IRIS_DECINFO_ALU_WIDTH = (IRIS_DECINFO_ALU_WFI_MSB+1)

    //AGU group
    val IRIS_DECINFO_AGU_LOAD_LSB = IRIS_DECINFO_SUBDECINFO_LSB
    val IRIS_DECINFO_AGU_LOAD_MSB = (IRIS_DECINFO_AGU_LOAD_LSB+1-1)
    val IRIS_DECINFO_AGU_STORE_LSB = (IRIS_DECINFO_AGU_LOAD_MSB+1)
    val IRIS_DECINFO_AGU_STORE_MSB = (IRIS_DECINFO_AGU_STORE_LSB+1-1)
    val IRIS_DECINFO_AGU_SIZE_LSB = (IRIS_DECINFO_AGU_STORE_MSB+1)
    val IRIS_DECINFO_AGU_SIZE_MSB = (IRIS_DECINFO_AGU_SIZE_LSB+2-1)
    val IRIS_DECINFO_AGU_USIGN_LSB = (IRIS_DECINFO_AGU_SIZE_MSB+1)
    val IRIS_DECINFO_AGU_USIGN_MSB = (IRIS_DECINFO_AGU_USIGN_LSB+1-1)
    val IRIS_DECINFO_AGU_EXCL_LSB = (IRIS_DECINFO_AGU_USIGN_MSB+1)
    val IRIS_DECINFO_AGU_EXCL_MSB = (IRIS_DECINFO_AGU_EXCL_LSB+1-1)
    val IRIS_DECINFO_AGU_AMO_LSB = (IRIS_DECINFO_AGU_EXCL_MSB+1)
    val IRIS_DECINFO_AGU_AMO_MSB = (IRIS_DECINFO_AGU_AMO_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOSWAP_LSB = (IRIS_DECINFO_AGU_AMO_MSB+1)
    val IRIS_DECINFO_AGU_AMOSWAP_MSB = (IRIS_DECINFO_AGU_AMOSWAP_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOADD_LSB = (IRIS_DECINFO_AGU_AMOSWAP_MSB+1)
    val IRIS_DECINFO_AGU_AMOADD_MSB = (IRIS_DECINFO_AGU_AMOADD_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOAND_LSB = (IRIS_DECINFO_AGU_AMOADD_MSB+1)
    val IRIS_DECINFO_AGU_AMOAND_MSB = (IRIS_DECINFO_AGU_AMOAND_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOOR_LSB = (IRIS_DECINFO_AGU_AMOAND_MSB+1)
    val IRIS_DECINFO_AGU_AMOOR_MSB = (IRIS_DECINFO_AGU_AMOOR_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOXOR_LSB = (IRIS_DECINFO_AGU_AMOOR_MSB+1)
    val IRIS_DECINFO_AGU_AMOXOR_MSB = (IRIS_DECINFO_AGU_AMOXOR_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOMAX_LSB = (IRIS_DECINFO_AGU_AMOXOR_MSB+1)
    val IRIS_DECINFO_AGU_AMOMAX_MSB = (IRIS_DECINFO_AGU_AMOMAX_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOMIN_LSB = (IRIS_DECINFO_AGU_AMOMAX_MSB+1)
    val IRIS_DECINFO_AGU_AMOMIN_MSB = (IRIS_DECINFO_AGU_AMOMIN_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOMAXU_LSB = (IRIS_DECINFO_AGU_AMOMIN_MSB+1)
    val IRIS_DECINFO_AGU_AMOMAXU_MSB = (IRIS_DECINFO_AGU_AMOMAXU_LSB+1-1)
    val IRIS_DECINFO_AGU_AMOMINU_LSB = (IRIS_DECINFO_AGU_AMOMAXU_MSB+1)
    val IRIS_DECINFO_AGU_AMOMINU_MSB = (IRIS_DECINFO_AGU_AMOMINU_LSB+1-1)
    val IRIS_DECINFO_AGU_OP2IMM_LSB = (IRIS_DECINFO_AGU_AMOMINU_MSB+1)
    val IRIS_DECINFO_AGU_OP2IMM_MSB = (IRIS_DECINFO_AGU_OP2IMM_LSB+1-1)

    val IRIS_DECINFO_AGU_WIDTH = (IRIS_DECINFO_AGU_OP2IMM_MSB+1)

    // Bxx group
    val IRIS_DECINFO_BJP_JUMP_LSB = IRIS_DECINFO_SUBDECINFO_LSB
    val IRIS_DECINFO_BJP_JUMP_MSB = (IRIS_DECINFO_BJP_JUMP_LSB+1-1)
    val IRIS_DECINFO_BJP_BPRDT_LSB = (IRIS_DECINFO_BJP_JUMP_MSB+1)
    val IRIS_DECINFO_BJP_BPRDT_MSB = (IRIS_DECINFO_BJP_BPRDT_LSB+1-1)
    val IRIS_DECINFO_BJP_BEQ_LSB = (IRIS_DECINFO_BJP_BPRDT_MSB+1)
    val IRIS_DECINFO_BJP_BEQ_MSB = (IRIS_DECINFO_BJP_BEQ_LSB+1-1)
    val IRIS_DECINFO_BJP_BNE_LSB = (IRIS_DECINFO_BJP_BEQ_MSB+1)
    val IRIS_DECINFO_BJP_BNE_MSB = (IRIS_DECINFO_BJP_BNE_LSB+1-1)
    val IRIS_DECINFO_BJP_BLT_LSB = (IRIS_DECINFO_BJP_BNE_MSB+1)
    val IRIS_DECINFO_BJP_BLT_MSB = (IRIS_DECINFO_BJP_BLT_LSB+1-1)
    val IRIS_DECINFO_BJP_BGT_LSB = (IRIS_DECINFO_BJP_BLT_MSB+1)
    val IRIS_DECINFO_BJP_BGT_MSB = (IRIS_DECINFO_BJP_BGT_LSB+1-1)
    val IRIS_DECINFO_BJP_BLTU_LSB = (IRIS_DECINFO_BJP_BGT_MSB+1)
    val IRIS_DECINFO_BJP_BLTU_MSB = (IRIS_DECINFO_BJP_BLTU_LSB+1-1)
    val IRIS_DECINFO_BJP_BGTU_LSB = (IRIS_DECINFO_BJP_BLTU_MSB+1)
    val IRIS_DECINFO_BJP_BGTU_MSB = (IRIS_DECINFO_BJP_BGTU_LSB+1-1)
    val IRIS_DECINFO_BJP_BXX_LSB = (IRIS_DECINFO_BJP_BGTU_MSB+1)
    val IRIS_DECINFO_BJP_BXX_MSB = (IRIS_DECINFO_BJP_BXX_LSB+1-1)
    val IRIS_DECINFO_BJP_MRET_LSB = (IRIS_DECINFO_BJP_BXX_MSB+1)
    val IRIS_DECINFO_BJP_MRET_MSB = (IRIS_DECINFO_BJP_MRET_LSB+1-1)
    val IRIS_DECINFO_BJP_DRET_LSB = (IRIS_DECINFO_BJP_MRET_MSB+1)
    val IRIS_DECINFO_BJP_DRET_MSB = (IRIS_DECINFO_BJP_DRET_LSB+1-1)
    val IRIS_DECINFO_BJP_FENCE_LSB = (IRIS_DECINFO_BJP_DRET_MSB+1)
    val IRIS_DECINFO_BJP_FENCE_MSB = (IRIS_DECINFO_BJP_FENCE_LSB+1-1)
    val IRIS_DECINFO_BJP_FENCEI_LSB = (IRIS_DECINFO_BJP_FENCE_MSB+1)
    val IRIS_DECINFO_BJP_FENCEI_MSB = (IRIS_DECINFO_BJP_FENCEI_LSB+1-1)

    val IRIS_DECINFO_BJP_WIDTH = (IRIS_DECINFO_BJP_FENCEI_MSB+1)


    // CSR group
    val IRIS_DECINFO_CSR_CSRRW_LSB = IRIS_DECINFO_SUBDECINFO_LSB
    val IRIS_DECINFO_CSR_CSRRW_MSB = (IRIS_DECINFO_CSR_CSRRW_LSB+1-1)
    val IRIS_DECINFO_CSR_CSRRS_LSB = (IRIS_DECINFO_CSR_CSRRW_MSB+1)
    val IRIS_DECINFO_CSR_CSRRS_MSB = (IRIS_DECINFO_CSR_CSRRS_LSB+1-1)
    val IRIS_DECINFO_CSR_CSRRC_LSB = (IRIS_DECINFO_CSR_CSRRS_MSB+1)
    val IRIS_DECINFO_CSR_CSRRC_MSB = (IRIS_DECINFO_CSR_CSRRC_LSB+1-1)
    val IRIS_DECINFO_CSR_RS1IMM_LSB = (IRIS_DECINFO_CSR_CSRRC_MSB+1)
    val IRIS_DECINFO_CSR_RS1IMM_MSB = (IRIS_DECINFO_CSR_RS1IMM_LSB+1-1)
    val IRIS_DECINFO_CSR_ZIMMM_LSB = (IRIS_DECINFO_CSR_RS1IMM_MSB+1)
    val IRIS_DECINFO_CSR_ZIMMM_MSB = (IRIS_DECINFO_CSR_ZIMMM_LSB+5-1)
    val IRIS_DECINFO_CSR_RS1IS0_LSB = (IRIS_DECINFO_CSR_ZIMMM_MSB+1)
    val IRIS_DECINFO_CSR_RS1IS0_MSB = (IRIS_DECINFO_CSR_RS1IS0_LSB+1-1)
    val IRIS_DECINFO_CSR_CSRIDX_LSB = (IRIS_DECINFO_CSR_RS1IS0_MSB+1)
    val IRIS_DECINFO_CSR_CSRIDX_MSB = (IRIS_DECINFO_CSR_CSRIDX_LSB+12-1)

    val IRIS_DECINFO_CSR_WIDTH = (IRIS_DECINFO_CSR_CSRIDX_MSB+1)

    // EAI group
    val IRIS_DECINFO_EAI_INSTR_LSB = IRIS_DECINFO_SUBDECINFO_LSB // 4
    val IRIS_DECINFO_EAI_INSTR_MSB = (IRIS_DECINFO_EAI_INSTR_LSB+27-1)    // 30

    val IRIS_DECINFO_EAI_WIDTH = (IRIS_DECINFO_EAI_INSTR_MSB+1) // 31

    val IRIS_DECINFO_FPU_GRP_LSB = IRIS_DECINFO_SUBDECINFO_LSB
    val IRIS_DECINFO_FPU_GRP_MSB = (IRIS_DECINFO_FPU_GRP_LSB+IRIS_DECINFO_GRP_FPU_WIDTH-1)
    val IRIS_DECINFO_FPU_RM_LSB = (IRIS_DECINFO_FPU_GRP_MSB+1)
    val IRIS_DECINFO_FPU_RM_MSB = (IRIS_DECINFO_FPU_RM_LSB+3-1)
    val IRIS_DECINFO_FPU_USERM_LSB = (IRIS_DECINFO_FPU_RM_MSB+1)
    val IRIS_DECINFO_FPU_USERM_MSB = (IRIS_DECINFO_FPU_USERM_LSB+1-1)

    // FLSU group
    val IRIS_DECINFO_FLSU_LOAD_LSB = (IRIS_DECINFO_FPU_USERM_MSB+1)
    val IRIS_DECINFO_FLSU_LOAD_MSB = (IRIS_DECINFO_FLSU_LOAD_LSB+1-1)
    val IRIS_DECINFO_FLSU_STORE_LSB = (IRIS_DECINFO_FLSU_LOAD_MSB+1)
    val IRIS_DECINFO_FLSU_STORE_MSB = (IRIS_DECINFO_FLSU_STORE_LSB+1-1)
    val IRIS_DECINFO_FLSU_DOUBLE_LSB = (IRIS_DECINFO_FLSU_STORE_MSB+1)
    val IRIS_DECINFO_FLSU_DOUBLE_MSB = (IRIS_DECINFO_FLSU_DOUBLE_LSB+1-1)
    val IRIS_DECINFO_FLSU_OP2IMM_LSB = (IRIS_DECINFO_FLSU_DOUBLE_MSB+1)
    val IRIS_DECINFO_FLSU_OP2IMM_MSB = (IRIS_DECINFO_FLSU_OP2IMM_LSB+1-1)

    val IRIS_DECINFO_FLSU_WIDTH = (IRIS_DECINFO_FLSU_OP2IMM_MSB+1)

    // FDIV group
    val IRIS_DECINFO_FDIV_DIV_LSB = (IRIS_DECINFO_FPU_USERM_MSB+1)
    val IRIS_DECINFO_FDIV_DIV_MSB = (IRIS_DECINFO_FDIV_DIV_LSB+1-1)
    val IRIS_DECINFO_FDIV_SQRT_LSB = (IRIS_DECINFO_FDIV_DIV_MSB+1)
    val IRIS_DECINFO_FDIV_SQRT_MSB = (IRIS_DECINFO_FDIV_SQRT_LSB+1-1)
    val IRIS_DECINFO_FDIV_DOUBLE_LSB = (IRIS_DECINFO_FDIV_SQRT_MSB+1)
    val IRIS_DECINFO_FDIV_DOUBLE_MSB = (IRIS_DECINFO_FDIV_DOUBLE_LSB+1-1)

    val IRIS_DECINFO_FDIV_WIDTH = (IRIS_DECINFO_FDIV_DOUBLE_MSB+1)

    // FMIS group
    val IRIS_DECINFO_FMIS_FSGNJ_LSB = (IRIS_DECINFO_FPU_USERM_MSB+1)
    val IRIS_DECINFO_FMIS_FSGNJ_MSB = (IRIS_DECINFO_FMIS_FSGNJ_LSB+1-1)
    val IRIS_DECINFO_FMIS_FSGNJN_LSB = (IRIS_DECINFO_FMIS_FSGNJ_MSB+1)
    val IRIS_DECINFO_FMIS_FSGNJN_MSB = (IRIS_DECINFO_FMIS_FSGNJN_LSB+1-1)
    val IRIS_DECINFO_FMIS_FSGNJX_LSB = (IRIS_DECINFO_FMIS_FSGNJN_MSB+1)
    val IRIS_DECINFO_FMIS_FSGNJX_MSB = (IRIS_DECINFO_FMIS_FSGNJX_LSB+1-1)
    val IRIS_DECINFO_FMIS_FMVXW_LSB = (IRIS_DECINFO_FMIS_FSGNJX_MSB+1)
    val IRIS_DECINFO_FMIS_FMVXW_MSB = (IRIS_DECINFO_FMIS_FMVXW_LSB+1-1)
    val IRIS_DECINFO_FMIS_FCLASS_LSB = (IRIS_DECINFO_FMIS_FMVXW_MSB+1)
    val IRIS_DECINFO_FMIS_FCLASS_MSB = (IRIS_DECINFO_FMIS_FCLASS_LSB+1-1)
    val IRIS_DECINFO_FMIS_FMVWX_LSB = (IRIS_DECINFO_FMIS_FCLASS_MSB+1)
    val IRIS_DECINFO_FMIS_FMVWX_MSB = (IRIS_DECINFO_FMIS_FMVWX_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTWS_LSB = (IRIS_DECINFO_FMIS_FMVWX_MSB+1)
    val IRIS_DECINFO_FMIS_CVTWS_MSB = (IRIS_DECINFO_FMIS_CVTWS_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTWUS_LSB = (IRIS_DECINFO_FMIS_CVTWS_MSB+1)
    val IRIS_DECINFO_FMIS_CVTWUS_MSB = (IRIS_DECINFO_FMIS_CVTWUS_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTSW_LSB = (IRIS_DECINFO_FMIS_CVTWUS_MSB+1)
    val IRIS_DECINFO_FMIS_CVTSW_MSB = (IRIS_DECINFO_FMIS_CVTSW_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTSWU_LSB = (IRIS_DECINFO_FMIS_CVTSW_MSB+1)
    val IRIS_DECINFO_FMIS_CVTSWU_MSB = (IRIS_DECINFO_FMIS_CVTSWU_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTSD_LSB = (IRIS_DECINFO_FMIS_CVTSWU_MSB+1)
    val IRIS_DECINFO_FMIS_CVTSD_MSB = (IRIS_DECINFO_FMIS_CVTSD_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTDS_LSB = (IRIS_DECINFO_FMIS_CVTSD_MSB+1)
    val IRIS_DECINFO_FMIS_CVTDS_MSB = (IRIS_DECINFO_FMIS_CVTDS_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTWD_LSB = (IRIS_DECINFO_FMIS_CVTDS_MSB+1)
    val IRIS_DECINFO_FMIS_CVTWD_MSB = (IRIS_DECINFO_FMIS_CVTWD_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTWUD_LSB = (IRIS_DECINFO_FMIS_CVTWD_MSB+1)
    val IRIS_DECINFO_FMIS_CVTWUD_MSB = (IRIS_DECINFO_FMIS_CVTWUD_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTDW_LSB = (IRIS_DECINFO_FMIS_CVTWUD_MSB+1)
    val IRIS_DECINFO_FMIS_CVTDW_MSB = (IRIS_DECINFO_FMIS_CVTDW_LSB+1-1)
    val IRIS_DECINFO_FMIS_CVTDWU_LSB = (IRIS_DECINFO_FMIS_CVTDW_MSB+1)
    val IRIS_DECINFO_FMIS_CVTDWU_MSB = (IRIS_DECINFO_FMIS_CVTDWU_LSB+1-1)
    val IRIS_DECINFO_FMIS_DOUBLE_LSB = (IRIS_DECINFO_FMIS_CVTDWU_MSB+1)
    val IRIS_DECINFO_FMIS_DOUBLE_MSB = (IRIS_DECINFO_FMIS_DOUBLE_LSB+1-1)

    val IRIS_DECINFO_FMIS_WIDTH = (IRIS_DECINFO_FMIS_DOUBLE_MSB+1)



    // FMAC group
    val IRIS_DECINFO_FMAC_FMADD_LSB = (IRIS_DECINFO_FPU_USERM_MSB+1)
    val IRIS_DECINFO_FMAC_FMADD_MSB = (IRIS_DECINFO_FMAC_FMADD_LSB+1-1)
    val IRIS_DECINFO_FMAC_FMSUB_LSB = (IRIS_DECINFO_FMAC_FMADD_MSB+1)
    val IRIS_DECINFO_FMAC_FMSUB_MSB = (IRIS_DECINFO_FMAC_FMSUB_LSB+1-1)
    val IRIS_DECINFO_FMAC_FNMSUB_LSB = (IRIS_DECINFO_FMAC_FMSUB_MSB+1)
    val IRIS_DECINFO_FMAC_FNMSUB_MSB = (IRIS_DECINFO_FMAC_FNMSUB_LSB+1-1)
    val IRIS_DECINFO_FMAC_FNMADD_LSB = (IRIS_DECINFO_FMAC_FNMSUB_MSB+1)
    val IRIS_DECINFO_FMAC_FNMADD_MSB = (IRIS_DECINFO_FMAC_FNMADD_LSB+1-1)
    val IRIS_DECINFO_FMAC_FADD_LSB = (IRIS_DECINFO_FMAC_FNMADD_MSB+1)
    val IRIS_DECINFO_FMAC_FADD_MSB = (IRIS_DECINFO_FMAC_FADD_LSB+1-1)
    val IRIS_DECINFO_FMAC_FSUB_LSB = (IRIS_DECINFO_FMAC_FADD_MSB+1)
    val IRIS_DECINFO_FMAC_FSUB_MSB = (IRIS_DECINFO_FMAC_FSUB_LSB+1-1)
    val IRIS_DECINFO_FMAC_FMUL_LSB = (IRIS_DECINFO_FMAC_FSUB_MSB+1)
    val IRIS_DECINFO_FMAC_FMUL_MSB = (IRIS_DECINFO_FMAC_FMUL_LSB+1-1)
    val IRIS_DECINFO_FMAC_FMIN_LSB = (IRIS_DECINFO_FMAC_FMUL_MSB+1)
    val IRIS_DECINFO_FMAC_FMIN_MSB = (IRIS_DECINFO_FMAC_FMIN_LSB+1-1)
    val IRIS_DECINFO_FMAC_FMAX_LSB = (IRIS_DECINFO_FMAC_FMIN_MSB+1)
    val IRIS_DECINFO_FMAC_FMAX_MSB = (IRIS_DECINFO_FMAC_FMAX_LSB+1-1)
    val IRIS_DECINFO_FMAC_FEQ_LSB = (IRIS_DECINFO_FMAC_FMAX_MSB+1)
    val IRIS_DECINFO_FMAC_FEQ_MSB = (IRIS_DECINFO_FMAC_FEQ_LSB+1-1)
    val IRIS_DECINFO_FMAC_FLT_LSB = (IRIS_DECINFO_FMAC_FEQ_MSB+1)
    val IRIS_DECINFO_FMAC_FLT_MSB = (IRIS_DECINFO_FMAC_FLT_LSB+1-1)
    val IRIS_DECINFO_FMAC_FLE_LSB = (IRIS_DECINFO_FMAC_FLT_MSB+1)
    val IRIS_DECINFO_FMAC_FLE_MSB = (IRIS_DECINFO_FMAC_FLE_LSB+1-1)
    val IRIS_DECINFO_FMAC_DOUBLE_LSB = (IRIS_DECINFO_FMAC_FLE_MSB+1)
    val IRIS_DECINFO_FMAC_DOUBLE_MSB = (IRIS_DECINFO_FMAC_DOUBLE_LSB+1-1)

    val IRIS_DECINFO_FMAC_WIDTH = (IRIS_DECINFO_FMAC_DOUBLE_MSB+1)

    // MULDIV group
    val IRIS_DECINFO_MULDIV_MUL_LSB = IRIS_DECINFO_SUBDECINFO_LSB
    val IRIS_DECINFO_MULDIV_MUL_MSB = (IRIS_DECINFO_MULDIV_MUL_LSB+1-1)
    val IRIS_DECINFO_MULDIV_MULH_LSB = (IRIS_DECINFO_MULDIV_MUL_MSB+1)
    val IRIS_DECINFO_MULDIV_MULH_MSB = (IRIS_DECINFO_MULDIV_MULH_LSB+1-1)
    val IRIS_DECINFO_MULDIV_MULHSU_LSB = (IRIS_DECINFO_MULDIV_MULH_MSB+1)
    val IRIS_DECINFO_MULDIV_MULHSU_MSB = (IRIS_DECINFO_MULDIV_MULHSU_LSB+1-1)
    val IRIS_DECINFO_MULDIV_MULHU_LSB = (IRIS_DECINFO_MULDIV_MULHSU_MSB+1)
    val IRIS_DECINFO_MULDIV_MULHU_MSB = (IRIS_DECINFO_MULDIV_MULHU_LSB+1-1)
    val IRIS_DECINFO_MULDIV_DIV_LSB = (IRIS_DECINFO_MULDIV_MULHU_MSB+1)
    val IRIS_DECINFO_MULDIV_DIV_MSB = (IRIS_DECINFO_MULDIV_DIV_LSB+1-1)
    val IRIS_DECINFO_MULDIV_DIVU_LSB = (IRIS_DECINFO_MULDIV_DIV_MSB+1)
    val IRIS_DECINFO_MULDIV_DIVU_MSB = (IRIS_DECINFO_MULDIV_DIVU_LSB+1-1)
    val IRIS_DECINFO_MULDIV_REM_LSB = (IRIS_DECINFO_MULDIV_DIVU_MSB+1)
    val IRIS_DECINFO_MULDIV_REM_MSB = (IRIS_DECINFO_MULDIV_REM_LSB+1-1)
    val IRIS_DECINFO_MULDIV_REMU_LSB = (IRIS_DECINFO_MULDIV_REM_MSB+1)
    val IRIS_DECINFO_MULDIV_REMU_MSB = (IRIS_DECINFO_MULDIV_REMU_LSB+1-1)
    val IRIS_DECINFO_MULDIV_B2B_LSB = (IRIS_DECINFO_MULDIV_REMU_MSB+1)
    val IRIS_DECINFO_MULDIV_B2B_MSB = (IRIS_DECINFO_MULDIV_B2B_LSB+1-1)

    val IRIS_DECINFO_MULDIV_WIDTH = (IRIS_DECINFO_MULDIV_B2B_MSB+1)

    // Choose the longest group as the final DEC info width
    val IRIS_DECINFO_WIDTH = (IRIS_DECINFO_EAI_WIDTH+1) // 32

}
